import json
from pathlib import Path

import typer
from rich import print
from rich.table import Table

from .utils import dotfile


app = typer.Typer()
DATA_FILE = Path("/home/daehyeon/sources/SDK/data.json")
with DATA_FILE.open("r") as fp:
    DATA = json.load(fp)

if DATA is None:
    DATA = {}

@app.command()
def register(
    name: str = typer.Argument(..., help=".env의 key"),
    file_path: str = typer.Argument(..., help=".env의 디렉토리")) -> None:
    """
    입력된 경로에 .env 생성 이미 존재하는 경우 data.json에 등록만 함
    """
    destination = Path(file_path) / ".env"
    if not destination.exists():
        with destination.open("w") as fp:
            fp.write("# Generated By SDK")
    with DATA_FILE.open("w") as fp:
        DATA.update({name: str(destination)})
        json.dump(DATA, fp)
    print("Success!")


@app.command()
def check():
    """
    SDK에 들록된 env files 확인
    """
    table = Table("KEY", "FILE PATH")
    for d in DATA.items():
        table.add_row(*d)
    print(table)


@app.command()
def show(name: str = typer.Argument(..., help=".env의 key")):
    """
    해당 env file의 변수 보여줌
    """
    env_values = dotfile.get_dotenv_values(file_path=DATA[name])
    if len(env_values) == 0:
        print("[bold] NOTHING [bold] 😅")
    else:
        table = Table("KEY", "VALUE")
        for item in env_values.items():
            table.add_row(*item)
        print(table)


@app.command()
def insert(
    name: str = typer.Argument(..., help=".env의 key"),
    key: str = typer.Argument(..., help="환경변수 key"),
    value: str = typer.Argument(..., help="환경변수 value")):
    """
    해당 env file에 변수 Upsert
    """
    env_values = dotfile.get_dotenv_values(file_path=DATA[name])
    env_values[key] = value
    dotfile.save_dotenv_values(file_path=DATA[name], values=env_values)
    show(name)


@app.command()
def delete(
    name: str = typer.Argument(..., help=".env의 key"),
    key: str = typer.Argument(..., help="환경변수 key")):
    """
    해당 env file에서 번수 제거
    """
    env_values = dotfile.get_dotenv_values(file_path=DATA[name])
    try:
        env_values.pop(key)
    except KeyError:
        print(f"[bold] {key} NOT FOUND [bold] 😅")
    dotfile.save_dotenv_values(file_path=DATA[name], values=env_values)
    show(name)
